package Controlador;


/**
 * Clase para determinar lo concerniente a la prueba t de Student.
 */
public class T_Test {
	private double tcalc;
	private double tcrit;
	private double df;
	private boolean dfcalc = false;
	private boolean H0;
	private String Sign;
	double dif_array[];

	/**
	 * Constructor para emplear el calculo del grado de libertad
	 */
	public T_Test() {

	}

	/**
	 * Obtiene el valor cr�tico para valores no tabulados.
	 * 
	 * @param df      - Grados de libertad.
	 * @param percent - Nivel de confianza.
	 * @return El valor cr�tico correspondiente a los grados de libertad y nivel de
	 *         confianza dados.
	 */
	public double Get_cv(double df, double cLevel, double sided) {
		System.out.println(df);
		/*
		 * Ecuaciones propuestas int ext 50%----lll8------lll6 0,1 60%----ll8-------lll6
		 * 2,3 70%----ll6-------lll6 4,5 80%----ll6-------lll6 6,7 90%----ll6-------lll6
		 * 8,9 95%----ll8-------ll5 10,11 98%----ll8-------ll4 12,13
		 * 99%----ll8-------lll6 14,15 99.5%--ll8-------lll6 16,17 99.8%--lll6------ll6
		 * 18,19 99.9%-------lll6------ 20
		 */
		double F[][] = {
				{ 0.69101587396548, -0.04582676188802, 0.01933401340637, 0.02761749333351, 0.00061417324716,
						-0.01496403505709, -0.00791287950229, 0.00000000000000, 0.00049155771373 },
				{ 0.69099098468164, -0.04576282231681, 0.02020154432552, 0.02649283733396, -0.00303760031396,
						-0.01271998039937, -0.00367507656611, 0.00000000000000, 0.00000000000000 },
				{ 0.99477503889844, -0.17626244129830, 0.02997173867906, 0.01112911588516, 0.02106661191733,
						-0.01896550476269, 0.00433787241767, 0.00000000000000, -0.00006687742387 },
				{ 0.86594199538533, -0.06785735484038, 0.03096689292557, 0.03846457356921, -0.00506533158261,
						-0.01857629811314, -0.00530601784619, 0.00000000000000, 0.00000000000000 },
				{ 1.27618525564377, -0.28583141364672, 0.04954155400331, 0.04455881054210, -0.00409878899763,
						-0.00952649563834, 0.00231301910185, 0.00000000000000, 0.00000000000000 },
				{ 1.07307648366172, -0.10300143855105, 0.04893661742820, 0.05670934761546, -0.00872808342832,
						-0.02756553484985, -0.00775587926308, 0.00000000000000, 0.00000000000000 },
				{ 1.68458804942471, -0.51048623462492, 0.12473640719702, 0.06653296297383, -0.01978176222098,
						-0.00821155446223, 0.00260197095238, 0.00000000000000, 0.00000000000000 },
				{ 1.33988946433827, -0.16566820820296, 0.08299693866559, 0.08739229395869, -0.01628001949494,
						-0.04286278114821, -0.01179827440481, 0.00000000000000, 0.00000000000000 },
				{ 2.45631197469579, -1.13446780460664, 0.41522915564799, 0.07032578591521, -0.05950270461381,
						0.00211198631931, 0.00186500942469, 0.00000000000000, 0.00000000000000 },
				{ 1.75175038921569, -0.30881377308852, 0.16829530885779, 0.15010715142981, -0.03705772130327,
						-0.07469419512353, -0.01972806624264, 0.00000000000000, 0.00000000000000 },
				{ 3.37752533801674, -2.16998590052499, 1.01639913374700, 0.03516293848742, -0.19480255166694,
						0.08005597273093, -0.01521024301101, 0.00000000000000, 0.00041206792485 },
				{ 3.37825535254648, -2.18172436771175, 1.07053669694363, -0.07636205351588, -0.07705966568611,
						0.01588546753864, 0.00000000000000, 0.00000000000000, 0.00000000000000 },
				{ 4.94002102537423, -4.50225543774520, 2.78576400729061, -0.48594282285475, -0.30518920099588,
						0.21625679398419, -0.05060479446868, 0.00000000000000, 0.00132479292102 },
				{ 4.94237021354113, -4.54124561832359, 2.96900465630692, -0.86585554106746, 0.09497880725932,
						0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000 },
				{ 6.48557252703584, -7.34622341623725, 5.41876978676992, -1.72174127740234, -0.09301651590484,
						0.27484962969161, -0.07796394573823, 0.00000000000000, 0.00221624474635 },
				{ 2.94230900071841, -1.12134505048817, 0.78201428507259, 0.36396321970843, -0.20510286525284,
						-0.19456934426066, -0.04167330053697, 0.00000000000000, 0.00000000000000 },
				{ 8.45451682319025, -11.52869816534040, 9.83494825071497, -4.27141405149882, 0.66965994879583,
						0.21455996321830, -0.09637250443252, 0.00000000000000, 0.00325253232001 },
				{ 3.28032511522642, -1.47387473428856, 1.09905213923245, 0.39427636065976, -0.29207090290404,
						-0.21939784174412, -0.04194296946139, 0.00000000000000, 0.00000000000000 },
				{ 3.72507631008111, -2.02361825266122, 1.64191166153232, 0.37419070193483, -0.43543643984639,
						-0.22766916232747, -0.03285900061568, 0.00000000000000, 0.00000000000000 },
				{ 11.93899591035700, -20.15526760090210, 20.63283718335750, -12.46241661084960, 4.69716196811832,
						-1.02387705539257, 0.09756674149918, 0.00000000000000, 0.00000000000000 },
				{ 4.06318808271786, -2.50708542709965, 2.16170382473740, 0.29477492898531, -0.56386337292218,
						-0.20904374821720, -0.01761760584159, 0.00000000000000, 0.00000000000000 },
				{ 4.06318808271786, -2.50708542709965, 2.16170382473740, 0.29477492898531, -0.56386337292218,
						-0.20904374821720, -0.01761760584159, 0.00000000000000, 0.00000000000000 }

		};

		int n = 0, b = 0;
		if (df <= 2000) {
			if ((cLevel == 75 && sided == 1) || (cLevel == 50 && sided == 2)) {
				n = 0;
				b = 1;
			} else if ((cLevel == 80 && sided == 1) || (cLevel == 60 && sided == 2))
				n = 2;
			else if ((cLevel == 85 && sided == 1) || (cLevel == 70 && sided == 2))
				n = 4;
			else if ((cLevel == 90 && sided == 1) || (cLevel == 80 && sided == 2))
				n = 6;
			else if ((cLevel == 95 && sided == 1) || (cLevel == 90 && sided == 2))
				n = 8;
			else if ((cLevel == 97.5 && sided == 1) || (cLevel == 95 && sided == 2))
				n = 10;
			else if ((cLevel == 99 && sided == 1) || (cLevel == 98 && sided == 2))
				n = 12;
			else if ((cLevel == 99.5 && sided == 1) || (cLevel == 99 && sided == 2))
				n = 14;
			else if ((cLevel == 99.75 && sided == 1) || (cLevel == 99.5 && sided == 2))
				n = 16;
			else if ((cLevel == 99.9 && sided == 1) || (cLevel == 99.8 && sided == 2)) {
				n = 18;
				b = 1;
			} else if ((cLevel == 99.95 && sided == 1) || (cLevel == 99.9 && sided == 2)) {
				n = 20;
				b = 1;
			} else
				return 0;
			if (df < 1.1)
				return SimulatedValues.t.t[0][(int) (n / 2)];
			double cv = F[n][0];
			for (int a = 0; a < 8; a++) {
				switch (b) {
				case 0:
					cv = cv + (F[n][a + 1] * (Math.pow((Math.log(Math.log(df))), (a + 1))));
					break;
				case 1:
					cv = cv + (F[n][a + 1] * (Math.pow((Math.log(Math.log(Math.log(df)))), (a + 1))));
					break;
				}
			}
			return cv;
			// -------------------------------
		} else {
			b = 1;
			
			if ((cLevel == 75 && sided == 1) || (cLevel == 50 && sided == 2))
				n = 1;
			else if ((cLevel == 80 && sided == 1) || (cLevel == 60 && sided == 2))
				n = 3;
			else if ((cLevel == 85 && sided == 1) || (cLevel == 70 && sided == 2))
				n = 5;
			else if ((cLevel == 90 && sided == 1) || (cLevel == 80 && sided == 2))
				n = 7;
			else if ((cLevel == 95 && sided == 1) || (cLevel == 90 && sided == 2))
				n = 9;
			else if ((cLevel == 97.5 && sided == 1) || (cLevel == 95 && sided == 2)) {
				n = 11;
				b = 0;
			} else if ((cLevel == 99 && sided == 1) || (cLevel == 98 && sided == 2)) {
				n = 13;
				b = 0;
			} else if ((cLevel == 99.5 && sided == 1) || (cLevel == 99 && sided == 2)) {
				n = 15;
			}
			else if ((cLevel == 99.75 && sided == 1) || (cLevel == 99.5 && sided == 2)) {
				n = 17;
			}
			else if ((cLevel == 99.9 && sided == 1) || (cLevel == 99.8 && sided == 2)) {
				n = 19;
				b = 0;
			} else if ((cLevel == 99.95 && sided == 1) || (cLevel == 99.9 && sided == 2))
				n = 21;
			else
				return 0;
			
			double cv = F[n][0];
			
			for (int a = 0; a < 8; a++) {
				switch (b) {
				case 0:
					cv = cv + (F[n][a + 1] * (Math.pow((Math.log(Math.log(df))), (a + 1))));
					break;
				case 1:
					cv = cv + (F[n][a + 1] * (Math.pow((Math.log(Math.log(Math.log(df)))), (a + 1))));
					break;
				}
			}
			return cv;
		}
	}

	public double getTcalc() {
		return tcalc;
	}

	public void setTcalc(double tcalc) {
		if (Double.isNaN(tcalc))
			this.tcalc = 0.0;
		else
			this.tcalc = tcalc;
	}

	public double getDf() {
		return df;
	}

	public void setDf(double df) {
		this.df = df;
	}

	public boolean isDfcalc() {
		return dfcalc;
	}

	public void setDfcalc(boolean dfcalc) {
		this.dfcalc = dfcalc;
	}

	public double getTcrit() {
		return tcrit;
	}

	public void setTcrit(double tcrit) {
		System.out.println("hola-" + tcrit);
		if (Double.isNaN(tcrit))
			this.tcrit = 0.0;
		else
			this.tcrit = tcrit;
	}

	public boolean isH0() {
		return H0;
	}

	public void setH0(boolean h0) {
		H0 = h0;
	}

	public String getSign() {
		return Sign;
	}

	public void setSign(String sign) {
		Sign = sign;
	}
}